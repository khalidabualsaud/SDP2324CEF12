
import 'package:firebase_core/firebase_core.dart'; 
import 'package:flutter/material.dart'; import 
'package:floating_bottom_navigation_bar/floating_bottom_navigation_bar.dart
'; 
import 'package:firebase_auth/firebase_auth.dart'; import 
'package:cloud_firestore/cloud_firestore.dart'; import 
'HelpSupportPage.dart'; 
import 'LoginPage.dart'; // Make sure this is correctly imported 
import 'Widget/AppTheme.dart'; 
import 'home_page.dart'; // Home page for general users
import 'navigation_page.dart'; // Navigation or 
Maps page import 'settings_page.dart'; // 
Settings page 
void main() async { 
 
WidgetsFlutterBinding.ensureInitia
lized(); await 
Firebase.initializeApp(); 
runApp(MyApp()); 
} 
class MyApp extends StatelessWidget { 
 @override 
 Widget build(BuildContext 
context) { return 
MaterialApp( 
 debugShowCheckedModeBanner: false, 
 theme: AppTheme.themeData, // Custom theme data 
for the app home: LoginPage(), // Start with the 
LoginPage 
 ); 
 } 
} 
class Basirah extends StatefulWidget { 
 @override 
 _BasirahState createState() => _BasirahState(); 
} class _BasirahState extends 
State<Basirah> { int 
_bottomNavIndex = 0; // Active 
tab index 
 late List<Widget> _pages; // Pages in the 
bottom navigation bool _isLoading = true; // 
Loading state for async operations 
 
@overrid
e void 
initStat
e() { 
super.inFuture<void> _fetchUserProfile() async { 
 User? user = 
FirebaseAuth.instance.currentUser; 
if (user != null) { 
 // Fetch the unique user ID 
from Firestore try { 
 DocumentSnapshot userDoc = await 
FirebaseFirestore.instance.collection('AccompanyingBli
nd') 
 .where('authUID', isEqualTo: user.uid) 
 .limit(1) 
 .get() 
 .then((snapshot) => 
snapshot.docs.first); 
 String uniqueUserId = 
userDoc['uniqueId']; String 
BlindUserId = userDoc['blindUserId']; 
 // Initialize pages with the fetched unique 
user ID for the 
UserProfilePage 
 _pages = [ 
 HomePage(), 
 MapsScreen(blindUserId: BlindUserId), 
 SettingsPage(accompanyingUserId: 
uniqueUserId), // Pass the uniqueUserId 
 UserProfilePage(uniqueUserId: uniqueUserId), 
// Pass the
uniqueUserId 
 ]; 

itState(
); 
_fetchUs
erProfil
e(); 
 }setState(() => _isLoading = false); // Update loading state 
 } catch (e) { 
 print('Error fetching user profile: $e'); 
 setState(() => _isLoading = false); // Ensure loading state is 
updated even on error 
 } 
 } else { 
 // Redirect to login page if no user is found 
 Navigator.of(context).pushReplacement(MaterialPageRoute(builder: (_) 
=> LoginPage())); 
 } 
 } 
 @override 
 Widget build(BuildContext context) { 
if (_isLoading) { 
 return Scaffold(body: Center(child: CircularProgressIndicator())); 
} 
 return Scaffold( 
 body: _pages[_bottomNavIndex], 
bottomNavigationBar: FloatingNavbar( 
 onTap: (int val) => setState(() => _bottomNavIndex = val), 
currentIndex: _bottomNavIndex, 
 items: [ 
 FloatingNavbarItem(icon: Icons.home, title: 'Home'), 
 FloatingNavbarItem(icon: Icons.navigation, title: 'Navigation'), 
 FloatingNavbarItem(icon: Icons.message, title: 'Messages'), 
 FloatingNavbarItem(icon: Icons.person, title: 'Profile'), 
 ], 
 backgroundColor: Color(0xFF00A1E4), 
 selectedItemColor: AppTheme.themeData.colorScheme.secondary, 
unselectedItemColor: Colors.grey.shade300, 
 ), 
 ); 
 } 
} 
import 'package:flutter/material.dart'; 
import 'package:google_maps_flutter/google_maps_flutter.dart'; 
import 'package:firebase_database/firebase_database.dart'; 
class MapsScreen extends StatefulWidget { 
 final String blindUserId; // Unique ID of the blind user to 
track MapsScreen({required this.blindUserId}); 
 @override 
 _MapsScreenState createState() => _MapsScreenState(); 
} class _MapsScreenState extends 
State<MapsScreen> { 
 GoogleMapController? mapController; 
 LatLng _currentPosition = const LatLng(25.3548, 51.1839); // Default 
starting position 
 Map<MarkerId, Marker> markers = {};@override void 
initState() { 
super.initState(); 
 _listenToBlindUserLocation(); } 
 void _onMapCreated(GoogleMapController controller) { 
mapController = controller; 
 } void _listenToBlindUserLocation() 
{ final DatabaseReference 
locationRef = 
FirebaseDatabase.instance.ref().child('user_locations/${widget.blindUserId}
'); 
 locationRef.onValue.listen((event) { 
 final data = event.snapshot.value as Map<dynamic, dynamic>?; 
if (data != null) { 
 LatLng newLocation = LatLng(data['latitude'], data['longitude']); 
 _updateLocation(newLocation); 
 } 
 }); 
 } 
 void _updateLocation(LatLng newLocation) { 
setState(() { 
 _currentPosition = newLocation; 
 markers[MarkerId('blind_location')] = Marker( 
markerId: MarkerId('blind_location'), 
position: _currentPosition, 
 icon: BitmapDescriptor.defaultMarker, 
 ); 
}); 
 mapController?.animateCamera( 
 CameraUpdate.newCameraPosition( 
 CameraPosition(target: _currentPosition, zoom: 15.0), 
 ), 
 ); 
 } 
 @override 
 Widget build(BuildContext context) 
{ return Scaffold( body: 
GoogleMap( 
 onMapCreated: _onMapCreated, 
initialCameraPosition: CameraPosition( 
target: _currentPosition, zoom: 
11.0, 
 ), 
 markers: Set<Marker>.of(markers.values), 
), 
 ); 
 } 
} 
import 'package:flutter/material.dart'; 
import 'package:firebase_database/firebase_database.dart'; import 
'package:cloud_firestore/cloud_firestore.dart'; 
class SettingsPage extends StatelessWidget { 
final String accompanyingUserId; // ID of the logged-in accompanying user 
final databaseRef = FirebaseDatabase.instance.ref(); // Get a databasereference 
 // Constructor requiring the accompanying user's ID
SettingsPage({required this.accompanyingUserId}); 
 @override 
 Widget build(BuildContext context) 
{ return Scaffold( body: 
Padding( 
 padding: const 
EdgeInsets.all(8.0), child: 
ListView( children: <Widget>[ 
Card( 
 child: ListTile( 
 leading: Icon(Icons.message, color: Colors.blue), 
title: Text('Message'), 
 subtitle: Text('Send a message to your blind associate.'), 
onTap: () => showSendMessageDialog(context), 
 ), 
 ), 
Card( 
 child: ListTile( 
 leading: Icon(Icons.warning, color: Colors.red), 
title: Text('Alert'), 
 subtitle: Text('This is an important 
alert.'), trailing: IconButton( 
icon: Icon(Icons.close), onPressed: () { 
 // Code to handle action when 'close' is tapped 
 }, 
 ), 
 ), 
 ), 
 // Additional cards can be added here 
 ], 
 ), 
), 
 floatingActionButton: FloatingActionButton( 
onPressed: () => showSendMessageDialog(context), 
child: Icon(Icons.send), backgroundColor: 
Colors.blue, 
 ), 
 ); 
 } 
 void showSendMessageDialog(BuildContext context) { 
final _titleController = TextEditingController(); 
final _bodyController = TextEditingController(); 
 showDialog( 
context: context, 
 builder: (BuildContext context) { 
return AlertDialog( 
 title: Text('Send a Message'), 
content: SingleChildScrollView( 
child: ListBody( children: 
<Widget>[ 
 TextField( 
controller: _titleController, 
decoration: InputDecoration( 
 hintText: "Enter the title of your message"), 
 ),SizedBox(height: 8), // Spacing between text fieldsTextField( 
 controller: _bodyController, 
decoration: InputDecoration( 
 hintText: "Enter the body of your message" 
 ), 
maxLines: 4, // Makes the text field larger 
keyboardType: TextInputType.multiline, 
 ), 
 ], 
 ), 
), 
 actions: <Widget>[ 
 TextButton( 
 child: Text('Send'), 
onPressed: () { 
 sendMessage(context, _titleController.text, 
_bodyController.text); 
 Navigator.of(context).pop(); // Close the dialog 
 }, 
 ), 
 TextButton( 
 child: Text('Cancel'), 
onPressed: () { 
 Navigator.of(context).pop(); // Close the dialog without 
sending 
 }, 
 ), 
 ], 
 ); 
 }, 
 ); 
 } 
 void sendMessage(BuildContext context, String title, String body) async {
 // Retrieve blind user's ID from Firestore 
 var userDoc = await 
FirebaseFirestore.instance.collection('AccompanyingBlind').doc(accompanying 
UserId).get(); 
 if (userDoc.exists && userDoc.data() != null) { 
var blindUserId = userDoc.data()!['blindUserId']; 
 // Send message to specific path for the blind 
user var message = { "title": title, 
"body": body 
 }; 
 try { 
await 
databaseRef.child('messages').child(blindUserId).push().set(message); 
ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: 
Text('Message sent successfully to blind user!'))); 
 } catch (e) { 
 ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: 
Text('Failed to send message: $e'))); 
 } 
 } else { 
 ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Noassociated blind user found.'))); 
 } 
 } 
} 
import 'dart:async'; 
import 'package:flutter/material.dart'; import 
'package:firebase_auth/firebase_auth.dart';import 
'package:google_maps_flutter/google_maps_flutter.dart'; 
import 'package:location/location.dart'; import 
'package:intl/intl.dart'; 
import 'package:speech_to_text/speech_to_text.dart' as stt; 
import 'package:flutter_tts/flutter_tts.dart'; 
import 'LoginPage.dart'; // Make sure this path is correct for your 
LoginPage 
class HomePage extends StatefulWidget { 
 @override 
 _HomePageState createState() => _HomePageState(); 
} 
class _HomePageState extends State<HomePage> { 
 stt.SpeechToText _speechToText = stt.SpeechToText(); 
 FlutterTts _flutterTts = FlutterTts(); 
bool _isListening = false; 
 String _spokenText = "Say something..."; // Placeholder text for user's 
speech 
 String _responseText = ""; // Placeholder for AI's response 
 Timer? _alertTimer; 
 List<String> _alerts = [ 
 "Obstacle detected: Low hanging branch in 5 meters.", 
 "Emergency services are active nearby. Please remain alert.", 
"Guidance update: Safe crossing now available with audible signals 
activated." ]; 
 int _currentAlertIndex = 0; 
 GoogleMapController? _mapController; 
final Location _location = Location(); 
 LatLng _currentPosition = const LatLng(25.3548, 51.1839); // Qatar's 
central coordinates 
 Map<MarkerId, Marker> _markers = {}; 
 void _startAlertTimer() { 
 _alertTimer = Timer.periodic(Duration(seconds: 10), (timer) { 
setState(() { 
 _currentAlertIndex = (_currentAlertIndex + 1) % _alerts.length; 
 }); 
 }); 
 } 
 @override void 
initState() { 
super.initState(); 
 _speechToText.initialize(); _flutterTts.setLanguage("enUS"); 
 _startAlertTimer(); 
 } 
@override 
 Widget build(BuildContext context) {return Scaffold( 
body: Container( 
color: Colors.white, // 
Keeping the background 
white for a clean 
look 
 child: SafeArea( 
child: Column( 
children: <Widget>[ 
 SizedBox(height: 20), // Space at the top 
 _buildAppBar(), 
 Expanded( 
 child: SingleChildScrollView( // Allows scrolling of the 
widget 
 child: Column( 
children: [ 
 _buildAlertBar(), 
SizedBox(height: 20), // Space between components 
 _buildMapShortcut(), 
SizedBox(height: 20), // Additional UI components 
_buildSpokenAndResponseText(), // Displays the spoken and response texts 
 ], 
 ), 
 ), 
 ), 
 ], 
 ), 
 ), 
), 
 floatingActionButton: Padding( 
 padding: const EdgeInsets.only(bottom: 
100.0), child: FloatingActionButton.extended( 
onPressed: _listen, label: Text( 
 _isListening ? 'Listening...' : 'Talk to AI', 
style: TextStyle(color: Colors.white, fontSize: 20), 
 ), 
 icon: Icon( 
 _isListening ? Icons.mic : 
Icons.mic_none, color: Colors.white, 
size: 30, 
 ), 
 backgroundColor: Colors.blue, 
shape: RoundedRectangleBorder( 
 borderRadius: BorderRadius.circular(30.0), 
), 
 ), ), 
floatingActionButtonLocation: 
FloatingActionButtonLocation.centerDocked, 
); 
 } 
 Widget _buildAppBar() => Padding(padding: EdgeInsets.symmetric(horizontal: 16.0), 
child: Row( 
 mainAxisAlignment: MainAxisAlignment.spaceBetween, 
children: [ 
 Image.asset('assets/logo.png', height: 50), 
IconButton( 
 icon: Icon(Icons.logout), 
onPressed: _logout,color: Color(0xFF00A1E4), 
 ),], 
 ), 
 ); 
 Widget _buildAlertBar() { 
return Container( 
 margin: EdgeInsets.symmetric(horizontal: 16.0), 
padding: EdgeInsets.all(16.0), 
decoration: BoxDecoration( 
color: Colors.blue.shade100, 
 borderRadius: 
BorderRadius.circular(10.0), boxShadow: [ 
BoxShadow( 
 color: 
Colors.blue.shade200, 
blurRadius: 6, offset: 
Offset(0, 2), 
 ), 
 ], 
), child: 
Row( 
 mainAxisAlignment: 
MainAxisAlignment.spaceBetween, children: [ 
Expanded( child: Text( 
 _alerts[_currentAlertIndex], style: 
TextStyle(color: Color(0xFF00A1E4), fontWeight: 
FontWeight.bold), 
 ), 
 ), 
 Icon(Icons.warning_amber_rounded, color: Colors.orange), 
 ], 
 ), 
 ); 
 } 
 Widget _buildMapShortcut() => 
GestureDetector( onTap: () {}, child: 
Container( 
 margin: EdgeInsets.all(16.0), 
height: 200, 
 decoration: BoxDecoration( 
 borderRadius: 
BorderRadius.circular(10.0), boxShadow: [ 
BoxShadow( 
 color: 
Colors.grey.withOpacity(0.5), 
spreadRadius: 5, blurRadius: 7, 
offset: Offset(0, 3), 
 ), 
 ], 
), 
 child: ClipRRect( 
 borderRadius: BorderRadius.circular(10.0), 
child: GoogleMap( 
 onMapCreated: _onMapCreated, 
initialCameraPosition: CameraPosition( 
target: _currentPosition, zoom: 
11.0, 
 ), 
 markers: Set<Marker>.of(_markers.values),), 
), 
 ), 
 ); 
 Widget _buildSpokenAndResponseText() { 
return Column( children: <Widget>[Padding( 
 padding: EdgeInsets.all(8.0), 
child: Text( 
 'You said: "$_spokenText"', 
style: TextStyle( fontSize: 
16, color: Colors.black54, 
fontStyle: FontStyle.italic, 
 ), 
 ), 
 ), 
Padding( 
 padding: EdgeInsets.all(8.0), 
child: Text( 
 'AI responded: 
"$_responseText"', style: 
TextStyle( fontSize: 16, 
 fontWeight: FontWeight.bold, 
color: Colors.blue, 
 ), 
 ), 
 ), 
 ], 
 ); 
 } 
 void _logout() async { 
 await FirebaseAuth.instance.signOut(); 
 Navigator.of(context).pushReplacement(MaterialPageRoute(builder: 
(context) => LoginPage())); 
 } void _listen() 
async { if 
(!_isListening) { 
 bool available = await _speechToText.initialize( 
onStatus: (val) => print('onStatus: $val'), 
onError: (val) => print('onError: $val'), 
 ); 
 if (available) { 
setState(() { 
 _isListening = true; 
 _spokenText = "Listening..."; 
 }); 
 _speechToText.listen( 
 onResult: (val) => setState(() { 
 _spokenText = val.recognizedWords; // Update spoken text 
 _responseText = "Processing Command..."; 
 _handleCommand(val.recognizedWords); 
 _isListening = false; 
 }), 
 ); 
 } 
 } else { 
setState(() { 
 _isListening = false; 
 _speechToText.stop(); 
 }); 
 } 
 } 
 void _handleCommand(String command) {String lowerCaseCommand = command.toLowerCase(); 
 String response; 
 // Common inquiries and assistance 
 if (lowerCaseCommand.contains("how are you")) { 
 response = "I'm Basirah Ai here to help you. How can I assist you 
today?"; 
 } else if (lowerCaseCommand.contains("what is your name")) { 
response = 
 "I am your AI assistant, here to make your day easier and safer."; 
 } else if (lowerCaseCommand.contains("tell me a joke")) { 
response = 
 "What did one elevator say to the other elevator? I think I'm coming 
down with something!"; 
 } else if (lowerCaseCommand.contains("what time is it")) { 
DateTime now = DateTime.now(); 
 response = "The current time is ${now.hour}:${now.minute}."; 
 } else if (lowerCaseCommand.contains("what day is it")) { 
 DateTime now = DateTime.now(); 
response = 
 "Today is ${DateFormat('EEEE').format(now)}, the ${now.day}th."; 
 } else if (lowerCaseCommand.contains("thank you")) { 
 response = "You're welcome! If you need more assistance, just ask."; 
 // Navigation and mobility 
 } else if (lowerCaseCommand.contains("help me cross the road")) { 
response = 
 "Please wait for the tactile paving to vibrate or for the audible 
signals before crossing. Would you like me to alert someone to assist 
you?"; 
 } else if (lowerCaseCommand.contains("read text")) { 
response = 
 "Let's use the text recognition feature. Please hold the text in 
front of the camera."; 
 } else if (lowerCaseCommand.contains("find my way home")) { 
response = 
 "Let's activate GPS navigation to guide you home safely. Please 
follow my voice instructions."; 
 } else if (lowerCaseCommand.contains("where am i")) { 
response = 
 "You're currently at [location]. Do you need directions to a specific 
place?"; 
 // Daily life assistance 
 } else if (lowerCaseCommand.contains("identify object")) { 
response = 
 "Please point the camera towards the object you want to identify."; 
} else if (lowerCaseCommand.contains("describe surroundings")) { 
response = 
 "I will describe what's in front of you. Please hold your phone up to 
scan the area.";// Emotional support and encouragement 
 } else if (lowerCaseCommand.contains("motivate me")) {response = 
"Every step forward is a step towards achieving something bigger.Your courage is inspiring!"; 
 } else if (lowerCaseCommand.contains("call a friend")) { 
 response = "Who would you like to call? I can dial the number for 
you."; 
 // Additional support 
 } else if (lowerCaseCommand.contains("emergency help")) { 
response = 
 "I'm contacting emergency services and sending them your location. 
Stay where you are, help is on the way."; 
 } else if (lowerCaseCommand.contains("navigate to")) { 
 // Extract the destination from the command 
 final destination = lowerCaseCommand.replaceFirst("navigate to", "") 
 .trim(); 
 response = "Navigating to $destination. Please follow my voice 
guidance."; 
 } else if (lowerCaseCommand.contains("describe current location")) { 
response = 
 "You are at the corner of 5th Avenue and Main Street. There's a 
coffee shop to your right and a library across the street."; 
 } else if (lowerCaseCommand.contains("what's the weather like")) { 
 // Assuming integration with a weather API 
response = 
 "It's currently sunny and 75 degrees. There's a slight breeze coming 
from the west."; 
 } else if (lowerCaseCommand.contains("add reminder")) { 
 // This would require storing the reminder and handling 
notifications final reminder = lowerCaseCommand.replaceFirst("add 
reminder", 
"").trim(); 
 response = "Reminder added: $reminder. I'll notify you."; 
} else if (lowerCaseCommand.contains("play music")) { 
response = 
 "Playing your music playlist now. Let me know if you want to skip a 
song or change the volume."; 
 } else if (lowerCaseCommand.contains("where's my phone")) { 
// This could trigger a sound on the user's phone if it's nearby 
response = "I'm here! Follow my sound to find me."; 
 } else if (lowerCaseCommand.contains("read latest news")) { 
 // Assuming integration with a news API 
 response = "Here's the latest news: [Brief summary of top news 
stories]."; 
 } else if (lowerCaseCommand.contains("how do I look")) { 
// Assuming integration with image recognition or AI analysis 
response = 
 "You look great! Your outfit matches perfectly, and you're all set for 
the day."; 
 } else if (lowerCaseCommand.contains("open")) { 
 final app = lowerCaseCommand.replaceFirst("open", "").trim(); 
response = "Opening $app for you now."; 
 } else if (lowerCaseCommand.contains("send message to")) { 
 // This would require access to contacts and the ability to send 
messages 
 final contact = lowerCaseCommand.replaceFirst("send message to", "") 
 .trim(); 
response = "What message would you like to send to 
$contact?"; } else if (lowerCaseCommand.contains("how crowded 
is")) { final place = lowerCaseCommand.replaceFirst("how 
crowded is", "").trim(); 
 // Assuming access to crowd data or integration with a service 
response = 
"$place is currently moderately crowded. Would you like to know thebest time to visit?"; 
 } else if (lowerCaseCommand.contains("emergency")) { 
response = 
 "Activating emergency protocol. Alerting your contacts and sharing 
your location with emergency services."; 
 } 
 else if (lowerCaseCommand.contains("who's around me")) { 
response = 
 "Scanning... I detect two people nearby. Would you like to greet 
them?"; 
 } else if (lowerCaseCommand.contains("update my social status")) 
{ final status = lowerCaseCommand.replaceFirst( 
"update my social status to", "").trim(); response = 
 "Updating your social status to: '$status'. It's now shared with your 
friends."; 
 // Environmental Awareness 
 } else if (lowerCaseCommand.contains("describe the room")) { 
response = 
 "You're in a spacious and well-lit room with a couch to your left and 
a table in front of you."; 
 } else if (lowerCaseCommand.contains("any obstacles ahead")) { 
response = 
 "There's a small step two meters ahead. Please be cautious and use your 
cane."; 
 // Personal Care 
 } else if (lowerCaseCommand.contains("remind me to drink water")) { 
response = "Setting a water-drinking reminder for every two hours."; } 
else if (lowerCaseCommand.contains("when is my next appointment")) { 
 // Assuming integration with a calendar API 
 response = "Your next appointment is with Dr. Smith at 3 PM 
tomorrow."; 
 // Navigation Enhancements 
 } else if (lowerCaseCommand.contains("quiet places nearby")) { 
response = 
 "Found a quiet park three blocks away. Would you like directions?"; 
 } else if (lowerCaseCommand.contains("locate my keys")) 
{ // Assuming integration with a Bluetooth tracker 
response = "Your keys are in the kitchen drawer."; 
 // Entertainment and Leisure 
 } else if (lowerCaseCommand.contains("suggest a book")) { 
response = 
 "Based on your reading history, I recommend 'The Alchemist' by Paulo 
Coelho. Would you like me to start the audiobook?"; } 
else if (lowerCaseCommand.contains("play a game")) { 
response = 
 "Starting a voice-guided trivia game. Get ready for the first 
question!"; 
 // Daily Routine Assistance 
 } else if (lowerCaseCommand.contains("what's for dinner")) { 
response ="You have ingredients for spaghetti or a salad. Which one do you 
prefer?"; 
 } else if (lowerCaseCommand.contains("turn on the lights")) {// Assuming smart home integration 
response = "Turning on the lights. The room is now bright.";// Health and Fitness 
 } else if (lowerCaseCommand.contains("log my exercise")) { 
final exerciseDetails = lowerCaseCommand.replaceFirst( 
 "log my exercise", "").trim(); 
response = 
 "Logging your exercise: $exerciseDetails. Great job staying active!";
 } else if (lowerCaseCommand.contains("how's my heart rate")) { 
// Assuming integration with health monitoring devices 
response = 
 "Checking... Your heart rate is 72 bpm, which is within a healthy 
range."; 
 // Emergency Assistance 
 } else if (lowerCaseCommand.contains("I feel unsafe")) { 
response = 
 "Activating safety protocol. Sharing your location with emergency 
contacts and authorities."; 
 } else 
{ 
response = 
 "I'm here to help. Could you please try asking in a different way?"; 
 } 
 _speak(response); 
 } 
 void _speak(String message) async { 
setState(() { 
 _responseText = message; // Update the response text 
 }); 
 await _flutterTts.speak(message); 
 } 
 
 void _onMapCreated(GoogleMapController controller) { 
 _mapController = controller; 
_getCurrentLocation(); 
 } void _getCurrentLocation() 
async { if (_mapController == 
null) return; 
 bool _serviceEnabled; 
 PermissionStatus _permissionGranted; 
 LocationData _locationData; 
 _serviceEnabled = await _location.serviceEnabled(); 
if (!_serviceEnabled) { 
 _serviceEnabled = await _location.requestService(); 
if (!_serviceEnabled) return; 
 } 
 _permissionGranted = await _location.hasPermission(); if 
(_permissionGranted == PermissionStatus.denied) { 
_permissionGranted = await _location.requestPermission(); 
if (_permissionGranted != PermissionStatus.granted) return; 
} 
 _locationData = await _location.getLocation();setState(() { 
 _currentPosition = LatLng(_locationData.latitude!, 
_locationData.longitude!); 
 _markers[MarkerId('current_location')] = Marker( 
markerId: MarkerId('current_location'), 
position: _currentPosition, 
 icon: BitmapDescriptor.defaultMarker, 
 ); 
 _mapController?.animateCamera( 
 CameraUpdate.newCameraPosition( 
 CameraPosition(target: _currentPosition, zoom: 15.0), 
 ), 
 ); 
 }); 
 } 
} 
